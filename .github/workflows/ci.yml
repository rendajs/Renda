# This workflow will install Deno then run Deno lint and test.

name: ci

on:
  push:
    branches: [main,ci-caching]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    env:
      DENO_DIR: /deno_dir

    steps:
      - name: Setup repo
        uses: actions/checkout@v2

      - name: Setup Deno
        # For more information see: https://github.com/denoland/setup-deno
        uses: denoland/setup-deno@v1.1.0
        with:
          deno-version: "1.24.1"

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          # Using the import map as key doesn't necessarily cause the cache to
          # get invalidated in all cases. A script could still import a url
          # directly for example. But this is good enough in most cases.
          # If the cache wasn't invalidated, this simply means some of the
          # dependencies are downloaded on every run, which is fine as long as
          # there are not too many uncached dependencies.
          # If at a later point it turns out using only the importmap as key
          # is not enough, we can add more files here.
          key: ${{ hashFiles('importmap.json') }}
          path: ${{ env.DENO_DIR }}

      - name: npm install
        run: npm install

      - name: Setup Renda
        # Sets up a development environment required for type the next steps to pass.
        run: deno task dev --no-serve

      - name: Install editor dependencies
        run: deno task build-editor-dependencies

      - name: Type check
        run: deno task check

      - name: Lint
        run: npm run lint

      - name: Install puppeteer
        run: PUPPETEER_PRODUCT=chrome deno run -A --unstable https://deno.land/x/puppeteer@14.1.1/install.ts

      - name: Test
        run: deno task test

